/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;

#if defined(SWIG_NOINCLUDE)
void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg);
#else


void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


#endif


#include <ag/AGAPI.h>
#include <ag/AGException.h>
#include <ag/agfio.h>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}
#define SWIG_exception(code, msg) { SWIG_JavaException(jenv, code, msg); }


#define raise_error(msg) { \
        string message = "WrapperError\x01"; \
        message += msg; \
        SWIG_exception(SWIG_RuntimeError, (char*) message.c_str()); \
    }


#include <string>


#include <stdio.h>
#include <string>
#include <map>
#include <set>
#include <list>
using namespace std;


inline static void
list2jlist(JNIEnv* jenv, list<string>& l, jobject& llObj)
{
    jclass ll = jenv->FindClass("java/util/ArrayList");
    jmethodID ll_constructor = jenv->GetMethodID(ll, "<init>", "()V");
    jmethodID ll_add = jenv->GetMethodID(ll, "add", "(Ljava/lang/Object;)Z");

    llObj = jenv->NewObject(ll, ll_constructor);

    // iterate through set and insert into the java object
    for(list<string>::iterator i=l.begin(); i!=l.end(); ++i)
	jenv->CallBooleanMethod(llObj, ll_add,
                                jenv->NewStringUTF(i->c_str()));
}

inline static void
set2jset(JNIEnv* jenv, set<string>& s, jobject& ssObj)
{
    jclass ss = jenv->FindClass("java/util/HashSet");
    jmethodID ss_constructor = jenv->GetMethodID(ss, "<init>", "()V");
    jmethodID ss_add = jenv->GetMethodID(ss, "add", "(Ljava/lang/Object;)Z");

    ssObj = jenv->NewObject(ss, ss_constructor);

    // iterate through set and insert into the java object
    for(set<string>::iterator i=s.begin(); i!=s.end(); ++i)
	jenv->CallBooleanMethod(ssObj, ss_add,
                                jenv->NewStringUTF(i->c_str()));
}

static void
map2jmap(JNIEnv* jenv, map<string,string>& m, jobject& zzObj)
{
    jclass zz = jenv->FindClass("java/util/HashMap");
    jmethodID zz_constructor = jenv->GetMethodID(zz, "<init>", "()V");
    jmethodID zz_put = jenv->GetMethodID(zz, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

    zzObj = jenv->NewObject(zz, zz_constructor);

    for (map<string,string>::iterator pos=m.begin(); pos!=m.end(); ++pos)
	jenv->CallObjectMethod(zzObj, zz_put,
                               jenv->NewStringUTF(pos->first.c_str()),
                               jenv->NewStringUTF(pos->second.c_str()));
}

static void
jlist2list(JNIEnv* jenv, jobject& zzObj, list<string>& l)
{
    if (zzObj == NULL) return;

    jclass ii = jenv->FindClass("java/util/Iterator");
    jmethodID ii_hasNext = jenv->GetMethodID(ii, "hasNext", "()Z");
    jmethodID ii_next = jenv->GetMethodID(ii, "next", "()Ljava/lang/Object;");

    jclass zz = jenv->GetObjectClass(zzObj);
    jmethodID zz_iterator =
        jenv->GetMethodID(zz, "iterator", "()Ljava/util/Iterator;");

    jobject iiObj = jenv->CallObjectMethod(zzObj, zz_iterator);

    l.clear();
    while (jenv->CallBooleanMethod(iiObj, ii_hasNext)) {
        jstring item = (jstring) jenv->CallObjectMethod(iiObj, ii_next);
	const char* str = jenv->GetStringUTFChars(item, NULL);
        l.push_back(str);
        jenv->ReleaseStringUTFChars(item, str);
    }
}

static void
jset2set(JNIEnv* jenv, jobject& zzObj, set<string>& s)
{
    if (zzObj == NULL) return;

    jclass ii = jenv->FindClass("java/util/Iterator");
    jmethodID ii_hasNext = jenv->GetMethodID(ii, "hasNext", "()Z");
    jmethodID ii_next = jenv->GetMethodID(ii, "next", "()Ljava/lang/Object;");

    jclass zz = jenv->GetObjectClass(zzObj);
    jmethodID zz_iterator =
        jenv->GetMethodID(zz, "iterator", "()Ljava/util/Iterator;");

    jobject iiObj = jenv->CallObjectMethod(zzObj, zz_iterator);

    s.clear();
    while (jenv->CallBooleanMethod(iiObj, ii_hasNext)) {
        jstring item = (jstring) jenv->CallObjectMethod(iiObj, ii_next);
	const char* str = jenv->GetStringUTFChars(item, NULL);
        s.insert(str);
        jenv->ReleaseStringUTFChars(item, str);
    }
}

static void
jmap2map(JNIEnv* jenv, jobject& mmObj, map<string,string>& m)
{
    if (mmObj == NULL) return;

    jclass ss = jenv->FindClass("java/util/Set");
    jclass ii = jenv->FindClass("java/util/Iterator");

    jmethodID ss_iterator = jenv->GetMethodID(ss, "iterator", "()Ljava/util/Iterator;");
    jmethodID ii_hasNext = jenv->GetMethodID(ii, "hasNext", "()Z");
    jmethodID ii_next = jenv->GetMethodID(ii, "next", "()Ljava/lang/Object;");

    jclass mm = jenv->GetObjectClass(mmObj);
    jmethodID mm_entrySet =
       jenv->GetMethodID(mm, "entrySet", "()Ljava/util/Set;");
    // FIXME: what if mmObj is not java.util.Map??

    jobject ssObj = jenv->CallObjectMethod(mmObj, mm_entrySet);
    jobject iiObj = jenv->CallObjectMethod(ssObj, ss_iterator);

    // loop through iterator looking at each mapping
    jclass ee;
    jobject eeObj;
    jmethodID ee_getKey, ee_getValue;
    if (jenv->CallBooleanMethod(iiObj, ii_hasNext)) {
        eeObj = jenv->CallObjectMethod(iiObj, ii_next);
        ee = jenv->GetObjectClass(eeObj);
        ee_getKey = jenv->GetMethodID(ee, "getKey", "()Ljava/lang/Object;");
        ee_getValue = jenv->GetMethodID(ee, "getValue", "()Ljava/lang/Object;");

        while (1) {
            jstring key = (jstring) jenv->CallObjectMethod(eeObj, ee_getKey);
            jstring value = (jstring) jenv->CallObjectMethod(eeObj, ee_getValue);
            const char* str1 = jenv->GetStringUTFChars(key,NULL);
            const char* str2 = jenv->GetStringUTFChars(value,NULL);
            m[str1] = str2;
            jenv->ReleaseStringUTFChars(key, str1);
            jenv->ReleaseStringUTFChars(value, str2);

            //TODO: what if the objects arent strings?
            if (jenv->CallBooleanMethod(iiObj, ii_hasNext))
                eeObj = jenv->CallObjectMethod(iiObj, ii_next);
            else
                break;
        }
    }
}



#include <ag/agtree.h>

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jstring JNICALL Java_jag_CreateAGSet(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsAGSet(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteAGSet(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_CreateAG(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateAG(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsAG(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsAG(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteAG(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteAG(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetAGIds(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAGIds(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_CreateTimeline(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsTimeline(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteTimeline(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_CreateSignal(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
    jstring jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    string arg5 ;
    string arg6 ;
    string arg7 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg4) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
        if (!pstr) return 0;
        arg4 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg4, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg5) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
        if (!pstr) return 0;
        arg5 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg5, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg6) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
        if (!pstr) return 0;
        arg6 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg6, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg7) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
        if (!pstr) return 0;
        arg7 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg7, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateSignal(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsSignal(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsSignal(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteSignal(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteSignal(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetSignals(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignals(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalMimeClass(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalMimeClass(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalMimeType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalMimeType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalEncoding(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalEncoding(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalXlinkType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalXlinkType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalXlinkHref(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalXlinkHref(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalUnit(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalUnit(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetSignalTrack(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetSignalTrack(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_CreateAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
    jstring jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg4) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
        if (!pstr) return 0;
        arg4 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg4, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateAnnotation(arg1,arg2,arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_CopyAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CopyAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_SplitAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = SplitAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_NSplitAnnotation(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    short arg2 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (short)jarg2; 
    {
        try {
            result = NSplitAnnotation(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAnnotationType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAnnotationInfo(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationInfo(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetStartAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetStartAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetEndAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetEndAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetStartAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    string arg1 ;
    string arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            SetStartAnchor(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT void JNICALL Java_jag_SetEndAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    string arg1 ;
    string arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            SetEndAnchor(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jdouble JNICALL Java_jag_GetStartOffset(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jdouble jresult = 0 ;
    string arg1 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)GetStartOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_jag_GetEndOffset(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jdouble jresult = 0 ;
    string arg1 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)GetEndOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetStartOffset(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    string arg1 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg2 = (double)jarg2; 
    {
        try {
            SetStartOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT void JNICALL Java_jag_SetEndOffset(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    string arg1 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg2 = (double)jarg2; 
    {
        try {
            SetEndOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationTypes(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationTypes(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationFeatureNames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationFeatureNames(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg2; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationFeatureNames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationFeatureNames(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetFeature(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    string arg1 ;
    string arg2 ;
    string arg3 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            SetFeature(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsFeature(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteFeature(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    string arg1 ;
    string arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_GetFeature(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_UnsetFeature(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    string arg1 ;
    string arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            UnsetFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetFeatureNames(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetFeatureNames(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetFeatures(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
    string arg1 ;
    map<string,string > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg2, m);
        arg2 = &m;
    }
    {
        try {
            SetFeatures(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetFeatures(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    map<string,string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetFeatures(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        map2jmap(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_UnsetFeatures(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            UnsetFeatures(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_CreateAnchor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jobject jarg4) {
    jstring jresult = 0 ;
    string arg1 ;
    double arg2 ;
    string arg3 ;
    set<string > *arg4 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static set<string> s;
        try {
            jset2set(jenv, jarg4, s);
            arg4 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = CreateAnchor(arg1,arg2,arg3,*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_CreateAnchor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
    jstring jresult = 0 ;
    string arg1 ;
    set<string > *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static set<string> s;
        try {
            jset2set(jenv, jarg2, s);
            arg2 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = CreateAnchor(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_CreateAnchor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = CreateAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_ExistsAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)ExistsAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_DeleteAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            DeleteAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT void JNICALL Java_jag_SetAnchorOffset(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    string arg1 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg2 = (double)jarg2; 
    {
        try {
            SetAnchorOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jdouble JNICALL Java_jag_GetAnchorOffset(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jdouble jresult = 0 ;
    string arg1 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)GetAnchorOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetOffsetUnit(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    string arg1 ;
    string arg2 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            SetOffsetUnit(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_GetOffsetUnit(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetOffsetUnit(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_SetAnchorSignalIds(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
    string arg1 ;
    set<string > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        static set<string> s;
        try {
            jset2set(jenv, jarg2, s);
            arg2 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            SetAnchorSignalIds(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jobject JNICALL Java_jag_GetAnchorSignalIds(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnchorSignalIds(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_GetAnchored(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string arg1 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)GetAnchored(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jag_UnsetAnchorOffset(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    string arg1 ;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return ;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            UnsetAnchorOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
}


JNIEXPORT jstring JNICALL Java_jag_SplitAnchor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = SplitAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetIncomingAnnotationSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetIncomingAnnotationSet(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg2; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetIncomingAnnotationSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetIncomingAnnotationSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetOutgoingAnnotationSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetOutgoingAnnotationSet(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg2; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetOutgoingAnnotationSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetOutgoingAnnotationSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnchorSet(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnchorSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnchorSetByOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = GetAnchorSetByOffset(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnchorSetByOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    {
        try {
            result = GetAnchorSetByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnchorSetNearestOffset(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    {
        try {
            result = GetAnchorSetNearestOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSet((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSet((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg1; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSetByFeature_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
    jobject jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string *arg4 = 0 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg4 = NULL;
    if(jarg4) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
        if (!pstr) return 0;
        arg4 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg4, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSetByFeature(arg1,arg2,arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    delete arg4; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSetByFeature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jobject jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    set<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSetByFeature(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set2jset(jenv, result, jresult);    
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSetByOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    string *arg3 = 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSetByOffset(arg1,arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg3; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSetByOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    {
        try {
            result = GetAnnotationSetByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSeqByOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jstring jarg4) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    string *arg4 = 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = NULL;
    if(jarg4) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
        if (!pstr) return 0;
        arg4 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg4, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2,arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg4; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSeqByOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSeqByOffset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    jobject jresult = 0 ;
    string arg1 ;
    double arg2 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_GetAnnotationSeqByOffset_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAnnotationByOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    string arg1 ;
    double arg2 ;
    string *arg3 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAnnotationByOffset(arg1,arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg3; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAnnotationByOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
    jstring jresult = 0 ;
    string arg1 ;
    double arg2 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (double)jarg2; 
    {
        try {
            result = GetAnnotationByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAGSetId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAGSetId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAGSetId_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = GetAGSetId();
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetAGId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetAGId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_GetTimelineId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = GetTimelineId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_toXML(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = toXML(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}



#ifdef AGDB

JNIEXPORT jboolean JNICALL Java_jag_LoadFromDB(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)LoadFromDB(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_StoreToDB(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)StoreToDB(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_StoreSQLs(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = StoreSQLs(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}



#endif

JNIEXPORT jboolean JNICALL Java_jag_SPrecedes(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)SPrecedes((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4, jobject jarg5) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    map<string,string > *arg5 = (map<string,string > *) 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg4, m);
        arg4 = &m;
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg5, m);
        arg5 = &m;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4,arg5);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg4, m);
        arg4 = &m;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_Load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_Load_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_Store_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jobject jarg4) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg4, m);
        arg4 = &m;
    }
    {
        try {
            result = Store((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_Store_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = Store((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_Store2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobject jarg3, jobject jarg4) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > *arg3 = (list<string > *) (list<string > *)0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static list<string> l;
        try {
            jlist2list(jenv, jarg3, l);
            arg3 = &l;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        static map<string, string> m;
        jmap2map(jenv, jarg4, m);
        arg4 = &m;
    }
    {
        try {
            result = Store2((string const &)*arg1,(string const &)*arg2,arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_Store2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jobject jarg3) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > *arg3 = (list<string > *) (list<string > *)0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        static list<string> l;
        try {
            jlist2list(jenv, jarg3, l);
            arg3 = &l;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Store2((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckAnchorOffsetTotal(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckAnchorOffsetTotal(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckAnchorOffsetBounded(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckAnchorOffsetBounded(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckFeatureExists(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckFeatureExists(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckFeatureIsAnnotationId(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckFeatureIsAnnotationId(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckLinear(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckLinear(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckConnected(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckConnected(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckCoextensive(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckCoextensive(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_CheckSpan(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jboolean jresult = 0 ;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)CheckSpan(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1init_1tree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_init_tree((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1init_1tree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_init_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1move_1down_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1move_1down_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1move_1down_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1move_1up(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_move_up((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1promote_1right(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_promote_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1promote_1left(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_promote_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1demote_1right(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_demote_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1demote_1left(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_demote_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1first_1tree(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_first_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1last_1tree(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_last_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1move(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_move((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1left_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1left_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1left_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1right_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1right_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1right_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1delete_1node_1left(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_delete_node_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1delete_1node_1right(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_delete_node_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1root_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
    jstring jresult = 0 ;
    string arg1 ;
    int arg2 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (int)jarg2; 
    {
        try {
            result = tree_root(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1root_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string arg1 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_root(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1parent(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_parent((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_tree_1children(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string *arg1 = 0 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_children((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1left(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1right(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_jag_tree_1path(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jobject jresult = 0 ;
    string arg1 ;
    list<string > result;
    
    (void)jenv;
    (void)jcls;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_path(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list2jlist(jenv, result, jresult);
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1common_1ancestor(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_common_ancestor((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string *arg4 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg4 = NULL;
    if(jarg4) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
        if (!pstr) return 0;
        arg4 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg4, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    delete arg3; 
    delete arg4; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_jag_tree_1insert_1node_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jag_tree_1delete_1node(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jboolean jresult = 0 ;
    string *arg1 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)tree_delete_node((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    jresult = (jboolean)result; 
    delete arg1; 
    return jresult;
}


#ifdef __cplusplus
}
#endif

