/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_mapTstring_string_t swig_types[0] 
#define  SWIGTYPE_p_setTstring_t swig_types[1] 
#define  SWIGTYPE_p_listTstring_t swig_types[2] 
#define  SWIGTYPE_p_string swig_types[3] 
static swig_type_info *swig_types[5];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    initag

#define SWIG_name    "ag"

#include <ag/AGAPI.h>
#include <ag/AGException.h>
#include <ag/agfio.h>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#define raise_error(msg) { \
        string message = "WrapperError\x01"; \
        message += msg; \
        SWIG_exception(SWIG_RuntimeError, (char*) message.c_str()); \
    }


void
plist2list(PyObject* lst, list<string>& l)
{
    //if (! PyList_Check(lst))
    //    throw string("expecting a list");
    l.clear();
    for (int i=0; i < PyList_Size(lst); ++i) {
        PyObject* item = PyList_GetItem(lst, i);
	//if (! PyString_Check(item))
	//    throw string("found a non-string list element");
        l.push_back(PyString_AsString(item));
    }
}

void
plist2set(PyObject* lst, set<string>& s)
{
    //if (! PyList_Check(lst))
    //    throw string("expecting a list");
    s.clear();
    for (int i=0; i < PyList_Size(lst); ++i) {
        PyObject* item = PyList_GetItem(lst, i);
	//if (! PyString_Check(item))
	//    throw string("found a non-string list element");
        s.insert(PyString_AsString(item));
    }
}

void
dic2map(PyObject* dic, map<string,string>& m)
{
    //if (! PyDict_Check(dic))
    //    throw string("expecting a dictionary");
    PyObject *key, *value;
    int pos = 0;
    m.clear();
    while (PyDict_Next(dic,&pos,&key,&value)) {
        //if (!PyString_Check(key) || !PyString_Check(value))
        //    throw string("found a non-string dictionary key or value);
        m[PyString_AsString(key)] = PyString_AsString(value);
    }
}


#include <ag/agtree.h>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_CreateAGSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CreateAGSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = CreateAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsAGSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsAGSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteAGSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteAGSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteAGSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAG(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CreateAG",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = CreateAG(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsAG(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsAG",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsAG(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteAG(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteAG",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteAG(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAGIds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAGIds",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAGIds(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateTimeline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CreateTimeline",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = CreateTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsTimeline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsTimeline",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteTimeline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteTimeline",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteTimeline(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateSignal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    string arg5 ;
    string arg6 ;
    string arg7 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:CreateSignal",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        (&arg4)->assign(PyString_AsString(obj3));
    }
    {
        (&arg5)->assign(PyString_AsString(obj4));
    }
    {
        (&arg6)->assign(PyString_AsString(obj5));
    }
    {
        (&arg7)->assign(PyString_AsString(obj6));
    }
    {
        try {
            result = CreateSignal(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsSignal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsSignal",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsSignal(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteSignal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteSignal",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteSignal(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignals",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignals(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalMimeClass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalMimeClass",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalMimeClass(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalMimeType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalMimeType",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalMimeType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalEncoding(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalEncoding",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalEncoding(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalXlinkType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalXlinkType",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalXlinkType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalXlinkHref(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalXlinkHref",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalXlinkHref(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalUnit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalUnit",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalUnit(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetSignalTrack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetSignalTrack",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetSignalTrack(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string arg4 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CreateAnnotation",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        (&arg4)->assign(PyString_AsString(obj3));
    }
    {
        try {
            result = CreateAnnotation(arg1,arg2,arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsAnnotation",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteAnnotation",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CopyAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CopyAnnotation",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = CopyAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SplitAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SplitAnnotation",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = SplitAnnotation(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NSplitAnnotation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    short arg2 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oh:NSplitAnnotation",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = NSplitAnnotation(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationType",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationType(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationInfo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationInfo",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationInfo(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetStartAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetStartAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetStartAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetEndAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetEndAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetEndAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetStartAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SetStartAnchor",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            SetStartAnchor(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetEndAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SetEndAnchor",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            SetEndAnchor(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetStartOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetStartOffset",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (double)GetStartOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetEndOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetEndOffset",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (double)GetEndOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetStartOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:SetStartOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            SetStartOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetEndOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:SetEndOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            SetEndOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationTypes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationTypes",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationTypes(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationFeatureNames__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetAnnotationFeatureNames",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = GetAnnotationFeatureNames(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationFeatureNames__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationFeatureNames",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationFeatureNames(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationFeatureNames(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetAnnotationFeatureNames__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GetAnnotationFeatureNames__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationFeatureNames'");
    return NULL;
}


static PyObject *_wrap_SetFeature(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SetFeature",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            SetFeature(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExistsFeature(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExistsFeature",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)ExistsFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteFeature(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DeleteFeature",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            DeleteFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFeature(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetFeature",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = GetFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnsetFeature(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnsetFeature",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            UnsetFeature(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFeatureNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetFeatureNames",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetFeatureNames(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetFeatures(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    map<string,string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SetFeatures",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj1, m);
            arg2 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            SetFeatures(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetFeatures(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    map<string,string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetFeatures",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetFeatures(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyDict_New();
        for (map<string,string>::iterator pos=(&result)->begin(); pos!=(&result)->end(); ++pos)
        PyDict_SetItemString(resultobj, (char*) pos->first.c_str(),
        PyString_FromString(pos->second.c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnsetFeatures(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnsetFeatures",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            UnsetFeatures(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAnchor__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    string arg3 ;
    set<string > *arg4 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OdOO:CreateAnchor",&obj0,&arg2,&obj2,&obj3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        static set<string> s;
        try {
            plist2set(obj3, s);
            arg4 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = CreateAnchor(arg1,arg2,arg3,*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAnchor__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CreateAnchor",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static set<string> s;
        try {
            plist2set(obj1, s);
            arg2 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = CreateAnchor(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAnchor__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CreateAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = CreateAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateAnchor(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_CreateAnchor__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyList_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_CreateAnchor__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyList_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_CreateAnchor__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'CreateAnchor'");
    return NULL;
}


static PyObject *_wrap_ExistsAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExistsAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)ExistsAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DeleteAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DeleteAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            DeleteAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetAnchorOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:SetAnchorOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            SetAnchorOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchorOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnchorOffset",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (double)GetAnchorOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetOffsetUnit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SetOffsetUnit",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            SetOffsetUnit(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetOffsetUnit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetOffsetUnit",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetOffsetUnit(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SetAnchorSignalIds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SetAnchorSignalIds",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static set<string> s;
        try {
            plist2set(obj1, s);
            arg2 = &s;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            SetAnchorSignalIds(arg1,*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchorSignalIds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnchorSignalIds",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnchorSignalIds(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchored(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnchored",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = (bool)GetAnchored(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnsetAnchorOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnsetAnchorOffset",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            UnsetAnchorOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SplitAnchor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SplitAnchor",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = SplitAnchor(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetIncomingAnnotationSet__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetIncomingAnnotationSet",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = GetIncomingAnnotationSet(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetIncomingAnnotationSet__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetIncomingAnnotationSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetIncomingAnnotationSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetIncomingAnnotationSet(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetIncomingAnnotationSet__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GetIncomingAnnotationSet__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetIncomingAnnotationSet'");
    return NULL;
}


static PyObject *_wrap_GetOutgoingAnnotationSet__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string *arg2 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetOutgoingAnnotationSet",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = GetOutgoingAnnotationSet(arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetOutgoingAnnotationSet__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetOutgoingAnnotationSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetOutgoingAnnotationSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetOutgoingAnnotationSet(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetOutgoingAnnotationSet__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GetOutgoingAnnotationSet__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetOutgoingAnnotationSet'");
    return NULL;
}


static PyObject *_wrap_GetAnchorSet(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnchorSet",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnchorSet(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchorSetByOffset__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odd:GetAnchorSetByOffset",&obj0,&arg2,&arg3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnchorSetByOffset(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchorSetByOffset__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:GetAnchorSetByOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnchorSetByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnchorSetByOffset(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_GetAnchorSetByOffset__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_GetAnchorSetByOffset__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnchorSetByOffset'");
    return NULL;
}


static PyObject *_wrap_GetAnchorSetNearestOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:GetAnchorSetNearestOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnchorSetNearestOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSet__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:GetAnnotationSet",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = GetAnnotationSet((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSet__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationSet",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = GetAnnotationSet((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSet(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetAnnotationSet__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_GetAnnotationSet__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationSet'");
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByFeature__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    string *arg4 = 0 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:GetAnnotationSetByFeature",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj3));
        arg4 = &s;
    }
    {
        try {
            result = GetAnnotationSetByFeature(arg1,arg2,arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByFeature__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    set<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GetAnnotationSetByFeature",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = GetAnnotationSetByFeature(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        set<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByFeature(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_GetAnnotationSetByFeature__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyString_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_GetAnnotationSetByFeature__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationSetByFeature'");
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByOffset__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    string *arg3 = 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OdO:GetAnnotationSetByOffset",&obj0,&arg2,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        try {
            result = GetAnnotationSetByOffset(arg1,arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByOffset__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:GetAnnotationSetByOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationSetByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSetByOffset(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_GetAnnotationSetByOffset__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_GetAnnotationSetByOffset__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationSetByOffset'");
    return NULL;
}


static PyObject *_wrap_GetAnnotationSeqByOffset__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    string *arg4 = 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OddO:GetAnnotationSeqByOffset",&obj0,&arg2,&arg3,&obj3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj3));
        arg4 = &s;
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2,arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSeqByOffset__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    double arg3 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odd:GetAnnotationSeqByOffset",&obj0,&arg2,&arg3)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSeqByOffset__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:GetAnnotationSeqByOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSeqByOffset__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAnnotationSeqByOffset",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationSeqByOffset(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationSeqByOffset(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetAnnotationSeqByOffset__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_GetAnnotationSeqByOffset__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_GetAnnotationSeqByOffset__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyString_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_GetAnnotationSeqByOffset__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationSeqByOffset'");
    return NULL;
}


static PyObject *_wrap_GetAnnotationByOffset__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    string *arg3 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OdO:GetAnnotationByOffset",&obj0,&arg2,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        try {
            result = GetAnnotationByOffset(arg1,arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationByOffset__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    double arg2 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:GetAnnotationByOffset",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAnnotationByOffset(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAnnotationByOffset(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_GetAnnotationByOffset__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_GetAnnotationByOffset__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAnnotationByOffset'");
    return NULL;
}


static PyObject *_wrap_GetAGSetId__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAGSetId",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAGSetId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAGSetId__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string result;
    
    if(!PyArg_ParseTuple(args,(char *)":GetAGSetId")) goto fail;
    {
        try {
            result = GetAGSetId();
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetAGSetId(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_GetAGSetId__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_GetAGSetId__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'GetAGSetId'");
    return NULL;
}


static PyObject *_wrap_GetAGId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetAGId",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetAGId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GetTimelineId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GetTimelineId",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = GetTimelineId(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_toXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:toXML",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = toXML(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}



#ifdef AGDB

static PyObject *_wrap_LoadFromDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LoadFromDB",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)LoadFromDB(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StoreToDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StoreToDB",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)StoreToDB(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StoreSQLs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StoreSQLs",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = StoreSQLs(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}



#endif

static PyObject *_wrap_SPrecedes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SPrecedes",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = (bool)SPrecedes((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    map<string,string > *arg5 = (map<string,string > *) 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Load",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj3, m);
            arg4 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj4, m);
            arg5 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4,arg5);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Load",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj3, m);
            arg4 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Load",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Load",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = Load((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Load(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Load__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Load__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyDict_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_Load__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyDict_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (!PyDict_Check(argv[4])) {
                                _v = 0;
                                PyErr_Clear();
                            }else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_Load__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Load'");
    return NULL;
}


static PyObject *_wrap_Store__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Store",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj3, m);
            arg4 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Store((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Store__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Store",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        try {
            result = Store((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Store(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Store__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyDict_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_Store__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Store'");
    return NULL;
}


static PyObject *_wrap_Store2__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > *arg3 = (list<string > *) (list<string > *)0 ;
    map<string,string > *arg4 = (map<string,string > *) 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Store2",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static list<string> l;
        try {
            plist2list(obj2, l);
            arg3 = &l;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        static map<string,string> m;
        try {
            dic2map(obj3, m);
            arg4 = &m;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Store2((string const &)*arg1,(string const &)*arg2,arg3,arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Store2__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    list<string > *arg3 = (list<string > *) (list<string > *)0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Store2",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static list<string> l;
        try {
            plist2list(obj2, l);
            arg3 = &l;
        }
        catch (const string& msg) {
            raise_error(msg);
        }
    }
    {
        try {
            result = Store2((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Store2(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyList_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Store2__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyList_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyDict_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_Store2__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Store2'");
    return NULL;
}


static PyObject *_wrap_CheckAnchorOffsetTotal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CheckAnchorOffsetTotal",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)CheckAnchorOffsetTotal(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckAnchorOffsetBounded(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CheckAnchorOffsetBounded",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)CheckAnchorOffsetBounded(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckFeatureExists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CheckFeatureExists",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = (bool)CheckFeatureExists(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckFeatureIsAnnotationId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CheckFeatureIsAnnotationId",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = (bool)CheckFeatureIsAnnotationId(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckLinear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CheckLinear",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)CheckLinear(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckConnected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CheckConnected",&obj0,&obj1)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        try {
            result = (bool)CheckConnected(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckCoextensive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CheckCoextensive",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = (bool)CheckCoextensive(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CheckSpan(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string arg2 ;
    string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CheckSpan",&obj0,&obj1,&obj2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        (&arg2)->assign(PyString_AsString(obj1));
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = (bool)CheckSpan(arg1,arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_init_tree__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_init_tree",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = tree_init_tree((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_init_tree__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_init_tree",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_init_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_init_tree(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_tree_init_tree__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_tree_init_tree__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_init_tree'");
    return NULL;
}


static PyObject *_wrap_tree_move_down__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tree_move_down",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_move_down__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_move_down",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_move_down__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_move_down",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_move_down((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_move_down(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_tree_move_down__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_tree_move_down__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_tree_move_down__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_move_down'");
    return NULL;
}


static PyObject *_wrap_tree_move_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_move_up",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_move_up((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_promote_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_promote_right",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_promote_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_promote_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_promote_left",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_promote_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_demote_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_demote_right",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_demote_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_demote_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_demote_left",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_demote_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_first_tree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_first_tree",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_first_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_last_tree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_last_tree",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_last_tree((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_move",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = (bool)tree_move((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_left__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tree_insert_node_left",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_left__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_insert_node_left",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_left__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_insert_node_left",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_insert_node_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_left(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_tree_insert_node_left__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_tree_insert_node_left__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_tree_insert_node_left__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_insert_node_left'");
    return NULL;
}


static PyObject *_wrap_tree_insert_node_right__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string arg3 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tree_insert_node_right",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        (&arg3)->assign(PyString_AsString(obj2));
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1,(string const &)*arg2,arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_right__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_insert_node_right",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_right__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_insert_node_right",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_insert_node_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node_right(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_tree_insert_node_right__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_tree_insert_node_right__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_tree_insert_node_right__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_insert_node_right'");
    return NULL;
}


static PyObject *_wrap_tree_delete_node_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_delete_node_left",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_delete_node_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_delete_node_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_delete_node_right",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_delete_node_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_root__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    int arg2 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:tree_root",&obj0,&arg2)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = tree_root(arg1,arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_root__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_root",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = tree_root(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_root(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_tree_root__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_tree_root__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_root'");
    return NULL;
}


static PyObject *_wrap_tree_parent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_parent",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_parent((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_children(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_children",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_children((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_left",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_left((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_right",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = tree_right((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string arg1 ;
    list<string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_path",&obj0)) goto fail;
    {
        (&arg1)->assign(PyString_AsString(obj0));
    }
    {
        try {
            result = tree_path(arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        list<string>::iterator pos = (&result)->begin();
        resultobj = PyList_New((&result)->size());
        for (int i=0; pos != (&result)->end(); ++i, ++pos)
        PyList_SET_ITEM(resultobj, i, PyString_FromString(pos->c_str()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_common_ancestor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_common_ancestor",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = tree_common_ancestor((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string *arg4 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:tree_insert_node",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj3));
        arg4 = &s;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2,(string const &)*arg3,(string const &)*arg4);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string *arg3 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tree_insert_node",&obj0,&obj1,&obj2)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj2));
        arg3 = &s;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2,(string const &)*arg3);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    string *arg2 = 0 ;
    string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tree_insert_node",&obj0,&obj1)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        static string s;
        s.assign(PyString_AsString(obj1));
        arg2 = &s;
    }
    {
        try {
            result = tree_insert_node((string const &)*arg1,(string const &)*arg2);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tree_insert_node(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_tree_insert_node__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_tree_insert_node__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (!PyString_Check(argv[0])) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (!PyString_Check(argv[1])) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (!PyString_Check(argv[2])) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (!PyString_Check(argv[3])) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_tree_insert_node__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'tree_insert_node'");
    return NULL;
}


static PyObject *_wrap_tree_delete_node(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tree_delete_node",&obj0)) goto fail;
    {
        static string s;
        s.assign(PyString_AsString(obj0));
        arg1 = &s;
    }
    {
        try {
            result = (bool)tree_delete_node((string const &)*arg1);
            
        }
        catch (AGException& err) {
            string message = "AGException\x01";
            message += err.error();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::LoadError& err) {
            string message = "LoadError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
        catch (const agfio::StoreError& err) {
            string message = "StoreError\x01";
            message += err.what();
            SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"CreateAGSet", _wrap_CreateAGSet, METH_VARARGS },
	 { (char *)"ExistsAGSet", _wrap_ExistsAGSet, METH_VARARGS },
	 { (char *)"DeleteAGSet", _wrap_DeleteAGSet, METH_VARARGS },
	 { (char *)"CreateAG", _wrap_CreateAG, METH_VARARGS },
	 { (char *)"ExistsAG", _wrap_ExistsAG, METH_VARARGS },
	 { (char *)"DeleteAG", _wrap_DeleteAG, METH_VARARGS },
	 { (char *)"GetAGIds", _wrap_GetAGIds, METH_VARARGS },
	 { (char *)"CreateTimeline", _wrap_CreateTimeline, METH_VARARGS },
	 { (char *)"ExistsTimeline", _wrap_ExistsTimeline, METH_VARARGS },
	 { (char *)"DeleteTimeline", _wrap_DeleteTimeline, METH_VARARGS },
	 { (char *)"CreateSignal", _wrap_CreateSignal, METH_VARARGS },
	 { (char *)"ExistsSignal", _wrap_ExistsSignal, METH_VARARGS },
	 { (char *)"DeleteSignal", _wrap_DeleteSignal, METH_VARARGS },
	 { (char *)"GetSignals", _wrap_GetSignals, METH_VARARGS },
	 { (char *)"GetSignalMimeClass", _wrap_GetSignalMimeClass, METH_VARARGS },
	 { (char *)"GetSignalMimeType", _wrap_GetSignalMimeType, METH_VARARGS },
	 { (char *)"GetSignalEncoding", _wrap_GetSignalEncoding, METH_VARARGS },
	 { (char *)"GetSignalXlinkType", _wrap_GetSignalXlinkType, METH_VARARGS },
	 { (char *)"GetSignalXlinkHref", _wrap_GetSignalXlinkHref, METH_VARARGS },
	 { (char *)"GetSignalUnit", _wrap_GetSignalUnit, METH_VARARGS },
	 { (char *)"GetSignalTrack", _wrap_GetSignalTrack, METH_VARARGS },
	 { (char *)"CreateAnnotation", _wrap_CreateAnnotation, METH_VARARGS },
	 { (char *)"ExistsAnnotation", _wrap_ExistsAnnotation, METH_VARARGS },
	 { (char *)"DeleteAnnotation", _wrap_DeleteAnnotation, METH_VARARGS },
	 { (char *)"CopyAnnotation", _wrap_CopyAnnotation, METH_VARARGS },
	 { (char *)"SplitAnnotation", _wrap_SplitAnnotation, METH_VARARGS },
	 { (char *)"NSplitAnnotation", _wrap_NSplitAnnotation, METH_VARARGS },
	 { (char *)"GetAnnotationType", _wrap_GetAnnotationType, METH_VARARGS },
	 { (char *)"GetAnnotationInfo", _wrap_GetAnnotationInfo, METH_VARARGS },
	 { (char *)"GetStartAnchor", _wrap_GetStartAnchor, METH_VARARGS },
	 { (char *)"GetEndAnchor", _wrap_GetEndAnchor, METH_VARARGS },
	 { (char *)"SetStartAnchor", _wrap_SetStartAnchor, METH_VARARGS },
	 { (char *)"SetEndAnchor", _wrap_SetEndAnchor, METH_VARARGS },
	 { (char *)"GetStartOffset", _wrap_GetStartOffset, METH_VARARGS },
	 { (char *)"GetEndOffset", _wrap_GetEndOffset, METH_VARARGS },
	 { (char *)"SetStartOffset", _wrap_SetStartOffset, METH_VARARGS },
	 { (char *)"SetEndOffset", _wrap_SetEndOffset, METH_VARARGS },
	 { (char *)"GetAnnotationTypes", _wrap_GetAnnotationTypes, METH_VARARGS },
	 { (char *)"GetAnnotationFeatureNames", _wrap_GetAnnotationFeatureNames, METH_VARARGS },
	 { (char *)"SetFeature", _wrap_SetFeature, METH_VARARGS },
	 { (char *)"ExistsFeature", _wrap_ExistsFeature, METH_VARARGS },
	 { (char *)"DeleteFeature", _wrap_DeleteFeature, METH_VARARGS },
	 { (char *)"GetFeature", _wrap_GetFeature, METH_VARARGS },
	 { (char *)"UnsetFeature", _wrap_UnsetFeature, METH_VARARGS },
	 { (char *)"GetFeatureNames", _wrap_GetFeatureNames, METH_VARARGS },
	 { (char *)"SetFeatures", _wrap_SetFeatures, METH_VARARGS },
	 { (char *)"GetFeatures", _wrap_GetFeatures, METH_VARARGS },
	 { (char *)"UnsetFeatures", _wrap_UnsetFeatures, METH_VARARGS },
	 { (char *)"CreateAnchor", _wrap_CreateAnchor, METH_VARARGS },
	 { (char *)"ExistsAnchor", _wrap_ExistsAnchor, METH_VARARGS },
	 { (char *)"DeleteAnchor", _wrap_DeleteAnchor, METH_VARARGS },
	 { (char *)"SetAnchorOffset", _wrap_SetAnchorOffset, METH_VARARGS },
	 { (char *)"GetAnchorOffset", _wrap_GetAnchorOffset, METH_VARARGS },
	 { (char *)"SetOffsetUnit", _wrap_SetOffsetUnit, METH_VARARGS },
	 { (char *)"GetOffsetUnit", _wrap_GetOffsetUnit, METH_VARARGS },
	 { (char *)"SetAnchorSignalIds", _wrap_SetAnchorSignalIds, METH_VARARGS },
	 { (char *)"GetAnchorSignalIds", _wrap_GetAnchorSignalIds, METH_VARARGS },
	 { (char *)"GetAnchored", _wrap_GetAnchored, METH_VARARGS },
	 { (char *)"UnsetAnchorOffset", _wrap_UnsetAnchorOffset, METH_VARARGS },
	 { (char *)"SplitAnchor", _wrap_SplitAnchor, METH_VARARGS },
	 { (char *)"GetIncomingAnnotationSet", _wrap_GetIncomingAnnotationSet, METH_VARARGS },
	 { (char *)"GetOutgoingAnnotationSet", _wrap_GetOutgoingAnnotationSet, METH_VARARGS },
	 { (char *)"GetAnchorSet", _wrap_GetAnchorSet, METH_VARARGS },
	 { (char *)"GetAnchorSetByOffset", _wrap_GetAnchorSetByOffset, METH_VARARGS },
	 { (char *)"GetAnchorSetNearestOffset", _wrap_GetAnchorSetNearestOffset, METH_VARARGS },
	 { (char *)"GetAnnotationSet", _wrap_GetAnnotationSet, METH_VARARGS },
	 { (char *)"GetAnnotationSetByFeature", _wrap_GetAnnotationSetByFeature, METH_VARARGS },
	 { (char *)"GetAnnotationSetByOffset", _wrap_GetAnnotationSetByOffset, METH_VARARGS },
	 { (char *)"GetAnnotationSeqByOffset", _wrap_GetAnnotationSeqByOffset, METH_VARARGS },
	 { (char *)"GetAnnotationByOffset", _wrap_GetAnnotationByOffset, METH_VARARGS },
	 { (char *)"GetAGSetId", _wrap_GetAGSetId, METH_VARARGS },
	 { (char *)"GetAGId", _wrap_GetAGId, METH_VARARGS },
	 { (char *)"GetTimelineId", _wrap_GetTimelineId, METH_VARARGS },
	 { (char *)"toXML", _wrap_toXML, METH_VARARGS },
#ifdef AGDB
	 { (char *)"LoadFromDB", _wrap_LoadFromDB, METH_VARARGS },
	 { (char *)"StoreToDB", _wrap_StoreToDB, METH_VARARGS },
	 { (char *)"StoreSQLs", _wrap_StoreSQLs, METH_VARARGS },
#endif
	 { (char *)"SPrecedes", _wrap_SPrecedes, METH_VARARGS },
	 { (char *)"Load", _wrap_Load, METH_VARARGS },
	 { (char *)"Store", _wrap_Store, METH_VARARGS },
	 { (char *)"Store2", _wrap_Store2, METH_VARARGS },
	 { (char *)"CheckAnchorOffsetTotal", _wrap_CheckAnchorOffsetTotal, METH_VARARGS },
	 { (char *)"CheckAnchorOffsetBounded", _wrap_CheckAnchorOffsetBounded, METH_VARARGS },
	 { (char *)"CheckFeatureExists", _wrap_CheckFeatureExists, METH_VARARGS },
	 { (char *)"CheckFeatureIsAnnotationId", _wrap_CheckFeatureIsAnnotationId, METH_VARARGS },
	 { (char *)"CheckLinear", _wrap_CheckLinear, METH_VARARGS },
	 { (char *)"CheckConnected", _wrap_CheckConnected, METH_VARARGS },
	 { (char *)"CheckCoextensive", _wrap_CheckCoextensive, METH_VARARGS },
	 { (char *)"CheckSpan", _wrap_CheckSpan, METH_VARARGS },
	 { (char *)"tree_init_tree", _wrap_tree_init_tree, METH_VARARGS },
	 { (char *)"tree_move_down", _wrap_tree_move_down, METH_VARARGS },
	 { (char *)"tree_move_up", _wrap_tree_move_up, METH_VARARGS },
	 { (char *)"tree_promote_right", _wrap_tree_promote_right, METH_VARARGS },
	 { (char *)"tree_promote_left", _wrap_tree_promote_left, METH_VARARGS },
	 { (char *)"tree_demote_right", _wrap_tree_demote_right, METH_VARARGS },
	 { (char *)"tree_demote_left", _wrap_tree_demote_left, METH_VARARGS },
	 { (char *)"tree_first_tree", _wrap_tree_first_tree, METH_VARARGS },
	 { (char *)"tree_last_tree", _wrap_tree_last_tree, METH_VARARGS },
	 { (char *)"tree_move", _wrap_tree_move, METH_VARARGS },
	 { (char *)"tree_insert_node_left", _wrap_tree_insert_node_left, METH_VARARGS },
	 { (char *)"tree_insert_node_right", _wrap_tree_insert_node_right, METH_VARARGS },
	 { (char *)"tree_delete_node_left", _wrap_tree_delete_node_left, METH_VARARGS },
	 { (char *)"tree_delete_node_right", _wrap_tree_delete_node_right, METH_VARARGS },
	 { (char *)"tree_root", _wrap_tree_root, METH_VARARGS },
	 { (char *)"tree_parent", _wrap_tree_parent, METH_VARARGS },
	 { (char *)"tree_children", _wrap_tree_children, METH_VARARGS },
	 { (char *)"tree_left", _wrap_tree_left, METH_VARARGS },
	 { (char *)"tree_right", _wrap_tree_right, METH_VARARGS },
	 { (char *)"tree_path", _wrap_tree_path, METH_VARARGS },
	 { (char *)"tree_common_ancestor", _wrap_tree_common_ancestor, METH_VARARGS },
	 { (char *)"tree_insert_node", _wrap_tree_insert_node, METH_VARARGS },
	 { (char *)"tree_delete_node", _wrap_tree_delete_node, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_mapTstring_string_t[] = {{"_p_mapTstring_string_t", 0, "map<string,string > *", 0},{"_p_mapTstring_string_t"},{0}};
static swig_type_info _swigt__p_setTstring_t[] = {{"_p_setTstring_t", 0, "set<string > *", 0},{"_p_setTstring_t"},{0}};
static swig_type_info _swigt__p_listTstring_t[] = {{"_p_listTstring_t", 0, "list<string > *", 0},{"_p_listTstring_t"},{0}};
static swig_type_info _swigt__p_string[] = {{"_p_string", 0, "string *", 0},{"_p_string"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_mapTstring_string_t, 
_swigt__p_setTstring_t, 
_swigt__p_listTstring_t, 
_swigt__p_string, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_STRING,  (char*)"__version__", 0, 0, (void *)"2.0", 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

